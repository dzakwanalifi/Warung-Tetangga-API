name: Warung Tetangga API CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10, 3.11, 3.12]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_warung_tetangga
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check app tests

    - name: Test with pytest
      run: |
        pytest tests/test_borongan.py -v --cov=app --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_warung_tetangga
        SECRET_KEY: test-secret-key-for-ci
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        AZURE_STORAGE_CONTAINER_NAME: test-container
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        TRIPAY_API_URL: https://tripay.co.id/api-sandbox
        TRIPAY_MERCHANT_CODE: ${{ secrets.TRIPAY_MERCHANT_CODE }}
        TRIPAY_API_KEY: ${{ secrets.TRIPAY_API_KEY }}
        TRIPAY_PRIVATE_KEY: ${{ secrets.TRIPAY_PRIVATE_KEY }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: bandit-report.sarif
        tool: bandit
        
    - name: Install bandit
      run: |
        python -m pip install bandit
        
    - name: Run security scan
      run: |
        bandit -r app -f json -o bandit-report.json || true

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Azure Functions (Staging)
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would deploy to Azure Functions staging slot"
        # Add your Azure deployment commands here
        
  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Azure Functions (Production)
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "This would deploy to Azure Functions production"
        # Add your Azure deployment commands here
        
    - name: Notify deployment success
      run: |
        echo "âœ… Warung Tetangga API deployed successfully to production!" 